#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram —Ç–æ–∫–µ–Ω–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
class TestConfig:
    TELEGRAM_BOT_TOKEN = "1234567890:TEST_TOKEN_FOR_DEVELOPMENT"
    BOT_MODE = "polling"
    DEBUG = True
    LOG_LEVEL = "INFO"
    CARD_WIDTH = 1280
    CARD_HEIGHT = 720
    SESSION_TIMEOUT_MINUTES = 30

sys.modules['app.config'] = TestConfig

from app.bot.main import ShowMyFoodBotRefactored


async def test_bot_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = ShowMyFoodBotRefactored()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    class MockMessage:
        def __init__(self, text, from_user_id=12345):
            self.text = text
            self.from_user = type('User', (), {'id': from_user_id})()
            self.answer_called = False
            self.answer_text = ""
        
        async def answer(self, text, **kwargs):
            self.answer_called = True
            self.answer_text = text
            print(f"   üì§ –û—Ç–≤–µ—Ç: {text[:100]}...")
    
    # –¢–µ—Å—Ç 1: –ö–æ–º–∞–Ω–¥–∞ /start
    print("\n1. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start:")
    message = MockMessage("/start")
    await bot.cmd_start(message)
    
    if message.answer_called and "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in message.answer_text:
        print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("   ‚ùå –ö–æ–º–∞–Ω–¥–∞ /start –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥–∞ /help
    print("\n2. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help:")
    message = MockMessage("/help")
    await bot.cmd_help(message)
    
    if message.answer_called and "–ü–æ–º–æ—â—å" in message.answer_text:
        print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("   ‚ùå –ö–æ–º–∞–Ω–¥–∞ /help –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 3: –ö–æ–º–∞–Ω–¥–∞ /reset
    print("\n3. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /reset:")
    message = MockMessage("/reset")
    await bot.cmd_reset(message)
    
    if message.answer_called and "–ì–æ—Ç–æ–≤–æ" in message.answer_text:
        print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /reset —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("   ‚ùå –ö–æ–º–∞–Ω–¥–∞ /reset –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    print("\n4. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:")
    message = MockMessage("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞")
    await bot.handle_text(message)
    
    if message.answer_called:
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞
    print("\n5. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞:")
    message = MockMessage("–±–æ—Ä—â 300–≥")
    await bot.handle_text(message)
    
    if message.answer_called:
        print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("   ‚ùå –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üçΩÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Show My Food Bot")
    print("=" * 50)
    
    try:
        await test_bot_commands()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("   ‚Ä¢ –ö–æ–¥ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–∫–µ–Ω–µ Telegram")
        print("\nüîß –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        print("   2. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ python run_bot.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
