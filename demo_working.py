#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
class Config:
    CARD_WIDTH = 1280
    CARD_HEIGHT = 720
    SESSION_TIMEOUT_MINUTES = 30

sys.modules['app.config'] = Config

from app.core.analyzer_refactored import DishAnalyzerRefactored
from app.core.renderer_refactored import CardRendererRefactored
from app.utils.text_parse import TextParser


async def demo_analyzer():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–ª—é–¥...")
    
    analyzer = DishAnalyzerRefactored()
    
    # –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    suggestions = await analyzer.get_dish_suggestions(b"fake_image")
    print(f"   üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞: {suggestions}")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    nutrition = await analyzer.calculate_nutrition("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", 250, "–≤–∞—Ä–∫–∞")
    if nutrition:
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑: {nutrition.dish_name} - {nutrition.total_kcal} –∫–∫–∞–ª")
    else:
        print("   ‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def demo_text_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞...")
    
    test_cases = [
        "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
        "–±–æ—Ä—â 300–≥", 
        "–ø–∏—Ü—Ü–∞ 250–≥ –∂–∞—Ä–∫–∞",
        "—Å–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å 150–≥ –∑–∞–ø–µ–∫–∞–Ω–∏–µ"
    ]
    
    for text in test_cases:
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        print(f"   '{text}' ‚Üí '{dish_name}', {weight}–≥, {cooking_method}")


async def demo_renderer():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞"""
    print("\nüé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫...")
    
    renderer = CardRendererRefactored()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    class MockNutritionResult:
        def __init__(self):
            self.dish_name = "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞"
            self.weight_g = 250
            self.cooking_method = "–≤–∞—Ä–∫–∞"
            self.total_kcal = 350
            self.total_protein = 12.5
            self.total_fat = 18.2
            self.total_carbs = 35.1
            self.assumptions = ["–†–∞—Å—á–µ—Ç –¥–ª—è 250–≥"]
    
    class MockFact:
        def __init__(self):
            self.type = "history"
            self.text = "–ü–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ –±—ã–ª–∞ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∞ –≤ –†–∏–º–µ –≤ 1944 –≥–æ–¥—É –ø–æ–≤–∞—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏ –†–µ–Ω–∞—Ç–æ –ì–∞–ª—å—è—Ä–¥–∏."
            self.sources = ["https://example.com"]
    
    try:
        card_data = renderer.render_card(MockNutritionResult(), [MockFact()])
        print(f"   ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(card_data)} –±–∞–π—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ –∫–∞—Ä—Ç–æ—á–∫—É
        with open("demo_card.png", "wb") as f:
            f.write(card_data)
        print("   üíæ –î–µ–º–æ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ demo_card.png")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üçΩÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Show My Food Bot")
    print("=" * 50)
    
    try:
        await demo_analyzer()
        await demo_text_parser()
        await demo_renderer()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("\nüìã –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ:")
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /start")
        print("   üîç –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("   ‚úÖ –†–µ—à–µ–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        print("\nüîß –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
        print("   2. –ù–∞–π–¥–∏—Ç–µ @BotFather")
        print("   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot")
        print("   4. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞")
        print("   5. –í–≤–µ–¥–∏—Ç–µ username –±–æ—Ç–∞")
        print("   6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
        print("   7. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª:")
        print("      TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print("   8. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_bot.py")
        print("\nüí° –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
