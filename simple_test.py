#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
class SimpleConfig:
    CARD_WIDTH = 1280
    CARD_HEIGHT = 720
    SESSION_TIMEOUT_MINUTES = 30

# –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
class Config:
    CARD_WIDTH = 1280
    CARD_HEIGHT = 720
    SESSION_TIMEOUT_MINUTES = 30

sys.modules['app.config'] = Config

from app.core.analyzer_refactored import DishAnalyzerRefactored
from app.core.renderer_refactored import CardRendererRefactored
from app.utils.text_parse import TextParser


async def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–ª—é–¥"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–ª—é–¥...")
    
    analyzer = DishAnalyzerRefactored()
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–ª—é–¥
    print("\n1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–ª—é–¥:")
    suggestions = await analyzer.get_dish_suggestions(b"fake_image_data")
    print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestions}")
    
    # –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    print("\n2. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏:")
    nutrition = await analyzer.calculate_nutrition("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", 250, "–≤–∞—Ä–∫–∞")
    if nutrition:
        print(f"   –ë–ª—é–¥–æ: {nutrition.dish_name}")
        print(f"   –ö–∞–ª–æ—Ä–∏–∏: {nutrition.total_kcal} –∫–∫–∞–ª")
        print(f"   –ë–µ–ª–∫–∏: {nutrition.total_protein}–≥")
        print(f"   –ñ–∏—Ä—ã: {nutrition.total_fat}–≥")
        print(f"   –£–≥–ª–µ–≤–æ–¥—ã: {nutrition.total_carbs}–≥")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
    print("\n3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤:")
    facts_result = await analyzer.get_facts("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞")
    if facts_result.facts:
        fact = facts_result.facts[0]
        print(f"   –§–∞–∫—Ç: {fact.text}")
        print(f"   –¢–∏–ø: {fact.type}")
    else:
        print("   ‚ùå –§–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n4. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    nutrition_result, facts_result = await analyzer.full_analysis("–±–æ—Ä—â", 300, "–≤–∞—Ä–∫–∞")
    if nutrition_result:
        print(f"   ‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
        print(f"   –ë–ª—é–¥–æ: {nutrition_result.dish_name}")
        print(f"   –ö–∞–ª–æ—Ä–∏–∏: {nutrition_result.total_kcal} –∫–∫–∞–ª")
    else:
        print("   ‚ùå –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")


async def test_renderer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫...")
    
    renderer = CardRendererRefactored()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    class MockNutritionResult:
        def __init__(self):
            self.dish_name = "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞"
            self.weight_g = 250
            self.cooking_method = "–≤–∞—Ä–∫–∞"
            self.total_kcal = 350
            self.total_protein = 12.5
            self.total_fat = 18.2
            self.total_carbs = 35.1
            self.assumptions = ["–†–∞—Å—á–µ—Ç –¥–ª—è 250–≥", "–£—á—Ç–µ–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –≤–∞—Ä–∫–µ"]
    
    class MockFact:
        def __init__(self):
            self.type = "history"
            self.text = "–ü–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ –±—ã–ª–∞ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∞ –≤ –†–∏–º–µ –≤ 1944 –≥–æ–¥—É –ø–æ–≤–∞—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏ –†–µ–Ω–∞—Ç–æ –ì–∞–ª—å—è—Ä–¥–∏."
            self.sources = ["https://example.com"]
    
    nutrition_result = MockNutritionResult()
    facts = [MockFact()]
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    try:
        card_data = renderer.render_card(nutrition_result, facts)
        print(f"   ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(card_data)} –±–∞–π—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        with open("test_card.png", "wb") as f:
            f.write(card_data)
        print("   üíæ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ test_card.png")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")


async def test_text_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞...")
    
    test_cases = [
        "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
        "–±–æ—Ä—â 300–≥",
        "–ø–∏—Ü—Ü–∞ 250–≥ –∂–∞—Ä–∫–∞",
        "—Å–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å 150–≥ –∑–∞–ø–µ–∫–∞–Ω–∏–µ",
        "—Å—É—à–∏ 200–≥"
    ]
    
    for text in test_cases:
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        print(f"   '{text}' ‚Üí '{dish_name}', {weight}–≥, {cooking_method}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üçΩÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–æ–≥–æ Show My Food Bot")
    print("=" * 50)
    
    try:
        await test_analyzer()
        await test_renderer()
        await test_text_parser()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéâ –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —É–ª—É—á—à–µ–Ω–æ:")
        print("   ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")
        print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª—é–¥")
        print("   ‚Ä¢ –°–¥–µ–ª–∞–Ω –≤–≤–æ–¥ –≤–µ—Å–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º")
        print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω –∫–∞—Ä—Ç–æ—á–µ–∫")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –±–ª—é–¥")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
