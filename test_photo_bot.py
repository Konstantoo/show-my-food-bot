#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Photo Advice Bot
"""

import asyncio
import sys
import os
from io import BytesIO
from PIL import Image

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from app.config import Config
from app.core.photo_analyzer import PhotoAnalyzer, PhotoAnalysisResult
from app.core.advice_renderer import AdviceRenderer
from app.core.session import SessionStore


async def test_photo_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
    
    analyzer = PhotoAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = Image.new('RGB', (1920, 1080), color='lightblue')
    image_data = BytesIO()
    test_image.save(image_data, format='JPEG')
    image_data.seek(0)
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    print("  üì∏ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ...")
    result = await analyzer.analyze_photo(image_data.getvalue())
    
    assert result is not None
    assert isinstance(result, PhotoAnalysisResult)
    assert 1 <= result.composition_score <= 10
    assert 1 <= result.lighting_score <= 10
    assert 1 <= result.technical_score <= 10
    assert 1 <= result.overall_score <= 10
    assert len(result.main_advice) > 0
    
    print(f"    ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.main_advice}")
    print(f"    ‚úÖ –û—Ü–µ–Ω–∫–∏: –∫–æ–º–ø–æ–∑–∏—Ü–∏—è={result.composition_score}, –æ—Å–≤–µ—â–µ–Ω–∏–µ={result.lighting_score}, —Ç–µ—Ö–Ω–∏–∫–∞={result.technical_score}")
    
    # –¢–µ—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
    print("  üí° –¢–µ—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤...")
    additional_advice = await analyzer.get_additional_advice(result)
    assert isinstance(additional_advice, list)
    print(f"    ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤: {len(additional_advice)}")
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


def test_advice_renderer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–≤–µ—Ç–æ–≤"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ —Å–æ–≤–µ—Ç–æ–≤...")
    
    renderer = AdviceRenderer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    result = PhotoAnalysisResult(
        main_advice="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π –¥–ª—è –ª—É—á—à–µ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
        composition_score=7,
        lighting_score=8,
        technical_score=6,
        overall_score=7,
        additional_advice=[
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É–≥–æ–ª —Å—ä–µ–º–∫–∏"
        ],
        mood="—Å–ø–æ–∫–æ–π–Ω–æ–µ",
        style_suggestions=["–º–∏–Ω–∏–º–∞–ª–∏–∑–º", "—á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ"]
    )
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    print("  üñºÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏...")
    card_data = renderer.render_advice_card(result)
    assert card_data is not None
    assert len(card_data) > 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        img = Image.open(BytesIO(card_data))
        assert img.width == 1280
        assert img.height == 720
        print(f"    ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {img.width}x{img.height}px")
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return False
    
    print("‚úÖ –†–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    return True


def test_session_store():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π"""
    print("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Å—Å–∏–π...")
    
    store = SessionStore()
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    print("  üë§ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
    session = store.get_session(12345)
    assert session.user_id == 12345
    assert session.current_photo_analysis is None
    print("    ‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("  üîÑ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    test_result = PhotoAnalysisResult(
        main_advice="–¢–µ—Å—Ç–æ–≤—ã–π —Å–æ–≤–µ—Ç",
        composition_score=8,
        lighting_score=7,
        technical_score=9,
        overall_score=8
    )
    
    session.current_photo_analysis = test_result
    session.add_advice_shown("—Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ–≤–µ—Ç")
    
    assert session.current_photo_analysis == test_result
    assert "—Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ–≤–µ—Ç" in session.advice_shown
    print("    ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("  üîÑ –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    session.reset_photo_state()
    assert session.current_photo_analysis is None
    print("    ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")
    
    print("‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


async def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    analyzer = PhotoAnalyzer()
    renderer = AdviceRenderer()
    store = SessionStore()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
    print("  üì± –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = Image.new('RGB', (1280, 720), color='lightgreen')
    image_data = BytesIO()
    test_image.save(image_data, format='JPEG')
    image_data.seek(0)
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = store.get_session(12345)
    
    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_result = await analyzer.analyze_photo(image_data.getvalue())
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏—é
    session.current_photo_analysis = analysis_result
    session.add_advice_shown(analysis_result.main_advice)
    
    # 5. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    card_data = renderer.render_advice_card(analysis_result)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert analysis_result is not None
    assert card_data is not None
    assert len(card_data) > 0
    
    print(f"    ‚úÖ –ê–Ω–∞–ª–∏–∑: {analysis_result.main_advice}")
    print(f"    ‚úÖ –û—Ü–µ–Ω–∫–∞: {analysis_result.overall_score}/10")
    print(f"    ‚úÖ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏: {len(card_data)} –±–∞–π—Ç")
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Photo Advice Bot\n")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        Config.validate()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await test_photo_analyzer()
        test_advice_renderer()
        test_session_store()
        await test_integration()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Photo Advice Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
