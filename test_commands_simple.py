#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
class Config:
    TELEGRAM_BOT_TOKEN = "1234567890:TEST_TOKEN_FOR_DEVELOPMENT"
    BOT_MODE = "polling"
    DEBUG = True
    LOG_LEVEL = "INFO"
    CARD_WIDTH = 1280
    CARD_HEIGHT = 720
    SESSION_TIMEOUT_MINUTES = 30

sys.modules['app.config'] = Config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from app.core.analyzer_refactored import DishAnalyzerRefactored
from app.core.renderer_refactored import CardRendererRefactored
from app.core.session import SessionStore
from app.utils.text_parse import TextParser


async def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    analyzer = DishAnalyzerRefactored()
    
    # –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–ª—é–¥
    suggestions = await analyzer.get_dish_suggestions(b"fake_image")
    print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–ª—é–¥: {suggestions}")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
    nutrition = await analyzer.calculate_nutrition("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", 250, "–≤–∞—Ä–∫–∞")
    if nutrition:
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç: {nutrition.dish_name} - {nutrition.total_kcal} –∫–∫–∞–ª")
    else:
        print("   ‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


async def test_text_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞...")
    
    test_cases = [
        "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
        "–±–æ—Ä—â 300–≥",
        "–ø–∏—Ü—Ü–∞ 250–≥ –∂–∞—Ä–∫–∞"
    ]
    
    for text in test_cases:
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        print(f"   '{text}' ‚Üí '{dish_name}', {weight}–≥, {cooking_method}")


async def test_session():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–µ—Å—Å–∏–π"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π...")
    
    session_store = SessionStore()
    session = session_store.get_session(12345)
    
    print(f"   –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {session.user_id}")
    print(f"   –¢–∞–π–º–∞—É—Ç: {Config.SESSION_TIMEOUT_MINUTES} –º–∏–Ω—É—Ç")


async def test_renderer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞...")
    
    renderer = CardRendererRefactored()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    class MockNutritionResult:
        def __init__(self):
            self.dish_name = "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞"
            self.weight_g = 250
            self.cooking_method = "–≤–∞—Ä–∫–∞"
            self.total_kcal = 350
            self.total_protein = 12.5
            self.total_fat = 18.2
            self.total_carbs = 35.1
            self.assumptions = ["–†–∞—Å—á–µ—Ç –¥–ª—è 250–≥"]
    
    class MockFact:
        def __init__(self):
            self.type = "history"
            self.text = "–ü–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ –±—ã–ª–∞ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∞ –≤ –†–∏–º–µ –≤ 1944 –≥–æ–¥—É."
            self.sources = ["https://example.com"]
    
    try:
        card_data = renderer.render_card(MockNutritionResult(), [MockFact()])
        print(f"   ‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(card_data)} –±–∞–π—Ç")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üçΩÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Show My Food Bot")
    print("=" * 50)
    
    try:
        await test_analyzer()
        await test_text_parser()
        await test_session()
        await test_renderer()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("\nüìã –í—ã–≤–æ–¥:")
        print("   ‚Ä¢ –ö–æ–¥ –±–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–∫–µ–Ω–µ Telegram")
        print("\nüîß –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ Telegram:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
        print("   2. –ó–∞–º–µ–Ω–∏—Ç–µ 'your_bot_token_here' –≤ .env —Ñ–∞–π–ª–µ")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_bot.py")
        print("\nüí° –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
