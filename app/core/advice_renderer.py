from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from typing import List


class AdviceRenderer:
    """–†–µ–Ω–¥–µ—Ä–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    
    def __init__(self):
        self.card_width = 1280
        self.card_height = 720
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'background': '#FFFFFF',
            'primary': '#2C3E50',
            'secondary': '#3498DB',
            'accent': '#E74C3C',
            'success': '#27AE60',
            'warning': '#F39C12',
            'text_primary': '#2C3E50',
            'text_secondary': '#7F8C8D',
            'border': '#BDC3C7',
            'gradient_start': '#667eea',
            'gradient_end': '#764ba2'
        }
    
    def render_advice_card(self, analysis_result) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            draw = ImageDraw.Draw(img)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            self._draw_gradient_background(draw)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self._draw_header(draw, "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self._draw_scores(draw, analysis_result)
            
            # –ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç
            self._draw_main_advice(draw, analysis_result.main_advice)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
            if analysis_result.additional_advice:
                self._draw_additional_advice(draw, analysis_result.additional_advice)
            
            # –ü–æ–¥–≤–∞–ª
            self._draw_footer(draw)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG', quality=95)
            img_byte_arr.seek(0)
            
            return img_byte_arr.getvalue()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return self._create_simple_card(analysis_result)
    
    def _draw_gradient_background(self, draw):
        """–†–∏—Å—É–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
        for y in range(self.card_height):
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É
            ratio = y / self.card_height
            r = int(102 + (118 - 102) * ratio)  # 667eea -> 764ba2
            g = int(126 + (75 - 126) * ratio)
            b = int(234 + (162 - 234) * ratio)
            
            color = (r, g, b)
            draw.line([(0, y), (self.card_width, y)], fill=color)
    
    def _draw_header(self, draw, title):
        """–†–∏—Å—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏)
            font_paths = [
                "/System/Library/Fonts/Arial.ttf",
                "/System/Library/Fonts/ArialHB.ttc",
                "/Library/Fonts/Arial.ttf",
                "/System/Library/Fonts/Helvetica.ttc"
            ]
            
            title_font = None
            subtitle_font = None
            
            for font_path in font_paths:
                try:
                    title_font = ImageFont.truetype(font_path, 48)
                    subtitle_font = ImageFont.truetype(font_path, 24)
                    break
                except:
                    continue
            
            if not title_font:
                raise Exception("No font found")
                
        except:
            # Fallback —à—Ä–∏—Ñ—Ç—ã
            title_font = ImageFont.load_default()
            subtitle_font = ImageFont.load_default()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_bbox = draw.textbbox((0, 0), title, font=title_font)
        title_width = title_bbox[2] - title_bbox[0]
        title_x = (self.card_width - title_width) // 2
        title_y = 40
        
        # –¢–µ–Ω—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        draw.text((title_x + 2, title_y + 2), title, font=title_font, fill=(0, 0, 0, 100))
        draw.text((title_x, title_y), title, font=title_font, fill=self.colors['background'])
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_text = "üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
        subtitle_bbox = draw.textbbox((0, 0), subtitle_text, font=subtitle_font)
        subtitle_width = subtitle_bbox[2] - subtitle_bbox[0]
        subtitle_x = (self.card_width - subtitle_width) // 2
        subtitle_y = title_y + 60
        
        draw.text((subtitle_x, subtitle_y), subtitle_text, font=subtitle_font, fill=self.colors['background'])
    
    def _draw_scores(self, draw, analysis_result):
        """–†–∏—Å—É–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            score_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 32)
            label_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            score_font = ImageFont.load_default()
            label_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞
        start_y = 150
        line_height = 50
        left_margin = 80
        right_margin = self.card_width - 80
        
        # –§–æ–Ω –¥–ª—è –æ—Ü–µ–Ω–æ–∫
        score_bg_height = 200
        draw.rounded_rectangle(
            [left_margin - 20, start_y - 20, right_margin + 20, start_y + score_bg_height],
            radius=15,
            fill=(255, 255, 255, 200)
        )
        
        # –û—Ü–µ–Ω–∫–∏
        scores = [
            ("üìê", "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è", analysis_result.composition_score, self.colors['primary']),
            ("üí°", "–û—Å–≤–µ—â–µ–Ω–∏–µ", analysis_result.lighting_score, self.colors['warning']),
            ("‚öôÔ∏è", "–¢–µ—Ö–Ω–∏–∫–∞", analysis_result.technical_score, self.colors['success']),
            ("‚≠ê", "–û–±—â–∞—è", analysis_result.overall_score, self.colors['accent'])
        ]
        
        for i, (emoji, label, score, color) in enumerate(scores):
            y = start_y + i * line_height
            
            # –≠–º–æ–¥–∑–∏
            draw.text((left_margin, y), emoji, font=score_font, fill=color)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            draw.text((left_margin + 50, y + 5), label, font=label_font, fill=self.colors['text_primary'])
            
            # –û—Ü–µ–Ω–∫–∞
            score_text = f"{score}/10"
            score_bbox = draw.textbbox((0, 0), score_text, font=score_font)
            score_width = score_bbox[2] - score_bbox[0]
            score_x = right_margin - score_width
            draw.text((score_x, y), score_text, font=score_font, fill=color)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_width = 200
            bar_height = 8
            bar_x = right_margin - bar_width - 80
            bar_y = y + 15
            
            # –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            draw.rounded_rectangle(
                [bar_x, bar_y, bar_x + bar_width, bar_y + bar_height],
                radius=4,
                fill=self.colors['border']
            )
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            fill_width = int((score / 10) * bar_width)
            if fill_width > 0:
                draw.rounded_rectangle(
                    [bar_x, bar_y, bar_x + fill_width, bar_y + bar_height],
                    radius=4,
                    fill=color
                )
    
    def _draw_main_advice(self, draw, main_advice):
        """–†–∏—Å—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç"""
        try:
            advice_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 28)
        except:
            advice_font = ImageFont.load_default()
            title_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        advice_y = 380
        left_margin = 60
        right_margin = self.card_width - 60
        
        # –§–æ–Ω –¥–ª—è —Å–æ–≤–µ—Ç–∞
        advice_bg_height = 120
        draw.rounded_rectangle(
            [left_margin - 15, advice_y - 15, right_margin + 15, advice_y + advice_bg_height],
            radius=12,
            fill=(255, 255, 255, 180)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≤–µ—Ç–∞
        advice_title = "üí° –ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç"
        draw.text((left_margin, advice_y), advice_title, font=title_font, fill=self.colors['primary'])
        
        # –¢–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞ (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        advice_text = main_advice
        if len(advice_text) > 150:
            advice_text = advice_text[:150] + "..."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        words = advice_text.split()
        lines = []
        current_line = ""
        
        for word in words:
            test_line = current_line + (" " if current_line else "") + word
            bbox = draw.textbbox((0, 0), test_line, font=advice_font)
            if bbox[2] - bbox[0] < right_margin - left_margin:
                current_line = test_line
            else:
                if current_line:
                    lines.append(current_line)
                current_line = word
        
        if current_line:
            lines.append(current_line)
        
        # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏
        for i, line in enumerate(lines[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ç—Ä–æ–∫–∏
            y = advice_y + 35 + i * 25
            draw.text((left_margin, y), line, font=advice_font, fill=self.colors['text_primary'])
    
    def _draw_additional_advice(self, draw, additional_advice):
        """–†–∏—Å—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"""
        try:
            advice_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 24)
        except:
            advice_font = ImageFont.load_default()
            title_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        advice_y = 520
        left_margin = 60
        right_margin = self.card_width - 60
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        advice_title = "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"
        draw.text((left_margin, advice_y), advice_title, font=title_font, fill=self.colors['primary'])
        
        # –°–æ–≤–µ—Ç—ã (–º–∞–∫—Å–∏–º—É–º 2)
        for i, advice in enumerate(additional_advice[:2]):
            y = advice_y + 30 + i * 25
            bullet_text = f"‚Ä¢ {advice}"
            
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(bullet_text) > 80:
                bullet_text = bullet_text[:80] + "..."
            
            draw.text((left_margin, y), bullet_text, font=advice_font, fill=self.colors['text_primary'])
    
    def _draw_footer(self, draw):
        """–†–∏—Å—É–µ—Ç –ø–æ–¥–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            footer_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 18)
        except:
            footer_font = ImageFont.load_default()
        
        footer_text = "üì∏ Photo Advice Bot ‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        footer_bbox = draw.textbbox((0, 0), footer_text, font=footer_font)
        footer_width = footer_bbox[2] - footer_bbox[0]
        footer_x = (self.card_width - footer_width) // 2
        footer_y = self.card_height - 40
        
        draw.text((footer_x, footer_y), footer_text, font=footer_font, fill=self.colors['text_secondary'])
    
    def _create_simple_card(self, analysis_result) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        try:
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            draw = ImageDraw.Draw(img)
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            text = f"üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
            text += f"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {analysis_result.composition_score}/10\n"
            text += f"–û—Å–≤–µ—â–µ–Ω–∏–µ: {analysis_result.lighting_score}/10\n"
            text += f"–¢–µ—Ö–Ω–∏–∫–∞: {analysis_result.technical_score}/10\n"
            text += f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis_result.overall_score}/10\n\n"
            text += f"–°–æ–≤–µ—Ç: {analysis_result.main_advice}"
            
            draw.text((50, 50), text, fill=self.colors['text_primary'])
            
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            
            return img_byte_arr.getvalue()
        except:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            return img_byte_arr.getvalue()
