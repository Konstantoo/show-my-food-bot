from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from typing import Dict, List


class ImprovementRenderer:
    """–†–µ–Ω–¥–µ—Ä–µ—Ä —Å—Ö–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
    
    def __init__(self):
        self.card_width = 1280
        self.card_height = 720
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'background': '#FFFFFF',
            'primary': '#2C3E50',
            'secondary': '#3498DB',
            'accent': '#E74C3C',
            'success': '#27AE60',
            'warning': '#F39C12',
            'text_primary': '#2C3E50',
            'text_secondary': '#7F8C8D',
            'border': '#BDC3C7',
            'gradient_start': '#667eea',
            'gradient_end': '#764ba2'
        }
    
    def render_improvement_card(self, analysis_data: Dict) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            draw = ImageDraw.Draw(img)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            self._draw_gradient_background(draw)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self._draw_header(draw, "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            self._draw_composition_analysis(draw, analysis_data)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self._draw_recommendations(draw, analysis_data.get('recommendations', []))
            
            # –ñ–∞–Ω—Ä
            self._draw_genre_info(draw, analysis_data.get('genre', {}))
            
            # –ü–æ–¥–≤–∞–ª
            self._draw_footer(draw)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG', quality=95)
            img_byte_arr.seek(0)
            
            return img_byte_arr.getvalue()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
            return self._create_simple_card(analysis_data)
    
    def _draw_gradient_background(self, draw):
        """–†–∏—Å—É–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
        for y in range(self.card_height):
            ratio = y / self.card_height
            r = int(102 + (118 - 102) * ratio)
            g = int(126 + (75 - 126) * ratio)
            b = int(234 + (162 - 234) * ratio)
            color = (r, g, b)
            draw.line([(0, y), (self.card_width, y)], fill=color)
    
    def _draw_header(self, draw, title):
        """–†–∏—Å—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        try:
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 48)
            subtitle_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            title_font = ImageFont.load_default()
            subtitle_font = ImageFont.load_default()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_bbox = draw.textbbox((0, 0), title, font=title_font)
        title_width = title_bbox[2] - title_bbox[0]
        title_x = (self.card_width - title_width) // 2
        title_y = 30
        
        # –¢–µ–Ω—å
        draw.text((title_x + 2, title_y + 2), title, font=title_font, fill=(0, 0, 0, 100))
        draw.text((title_x, title_y), title, font=title_font, fill=self.colors['background'])
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_text = "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
        subtitle_bbox = draw.textbbox((0, 0), subtitle_text, font=subtitle_font)
        subtitle_width = subtitle_bbox[2] - subtitle_bbox[0]
        subtitle_x = (self.card_width - subtitle_width) // 2
        subtitle_y = title_y + 60
        
        draw.text((subtitle_x, subtitle_y), subtitle_text, font=subtitle_font, fill=self.colors['background'])
    
    def _draw_composition_analysis(self, draw, analysis_data):
        """–†–∏—Å—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏"""
        try:
            info_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
            value_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 22)
        except:
            info_font = ImageFont.load_default()
            value_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        start_y = 150
        left_margin = 50
        right_margin = self.card_width - 50
        
        # –§–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_bg_height = 120
        draw.rounded_rectangle(
            [left_margin - 15, start_y - 15, right_margin + 15, start_y + analysis_bg_height],
            radius=12,
            fill=(255, 255, 255, 200)
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
        draw.text((left_margin, start_y), "üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:", font=value_font, fill=self.colors['primary'])
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis = analysis_data.get('analysis', {})
        technical = analysis_data.get('technical', {})
        
        elements = [
            ("üé® –¶–≤–µ—Ç–∞:", analysis.get('colors', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')),
            ("üí° –û—Å–≤–µ—â–µ–Ω–∏–µ:", analysis.get('lighting', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')),
            ("üìê –ö–æ–º–ø–æ–∑–∏—Ü–∏—è:", analysis.get('composition', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')),
            ("üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", technical.get('resolution', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'))
        ]
        
        for i, (label, value) in enumerate(elements):
            y = start_y + 35 + i * 20
            draw.text((left_margin, y), label, font=info_font, fill=self.colors['text_primary'])
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if len(value) > 40:
                value = value[:37] + "..."
            
            draw.text((left_margin + 120, y), value, font=info_font, fill=self.colors['text_secondary'])
    
    def _draw_recommendations(self, draw, recommendations):
        """–†–∏—Å—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 24)
            rec_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 18)
        except:
            title_font = ImageFont.load_default()
            rec_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        start_y = 300
        left_margin = 50
        right_margin = self.card_width - 50
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        draw.text((left_margin, start_y), "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:", font=title_font, fill=self.colors['primary'])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for i, rec in enumerate(recommendations[:4]):  # –ú–∞–∫—Å–∏–º—É–º 4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            y = start_y + 35 + i * 25
            
            # –§–æ–Ω –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            draw.rounded_rectangle(
                [left_margin - 10, y - 5, right_margin + 10, y + 20],
                radius=8,
                fill=(255, 255, 255, 150)
            )
            
            # –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if len(rec) > 60:
                rec = rec[:57] + "..."
            draw.text((left_margin, y), rec, font=rec_font, fill=self.colors['text_primary'])
    
    def _draw_genre_info(self, draw, genre_data):
        """–†–∏—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∞–Ω—Ä–µ"""
        try:
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 20)
            info_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        except:
            title_font = ImageFont.load_default()
            info_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        start_y = 500
        left_margin = 50
        right_margin = self.card_width - 50
        
        if genre_data.get('detected_genre') != 'unknown':
            genre_info = genre_data.get('genre_info', {})
            genre_name = genre_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä')
            genre_desc = genre_info.get('description', '')
            
            # –§–æ–Ω –¥–ª—è –∂–∞–Ω—Ä–∞
            draw.rounded_rectangle(
                [left_margin - 10, start_y - 10, right_margin + 10, start_y + 80],
                radius=10,
                fill=(255, 255, 255, 180)
            )
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
            draw.text((left_margin, start_y), f"üé≠ –ñ–∞–Ω—Ä: {genre_name}", font=title_font, fill=self.colors['secondary'])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
            if len(genre_desc) > 80:
                genre_desc = genre_desc[:77] + "..."
            draw.text((left_margin, start_y + 25), genre_desc, font=info_font, fill=self.colors['text_secondary'])
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = genre_data.get('confidence', 0)
            conf_text = f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {int(confidence * 100)}%"
            draw.text((left_margin, start_y + 50), conf_text, font=info_font, fill=self.colors['success'])
    
    def _draw_footer(self, draw):
        """–†–∏—Å—É–µ—Ç –ø–æ–¥–≤–∞–ª"""
        try:
            footer_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        except:
            footer_font = ImageFont.load_default()
        
        footer_text = "üì∏ Food Photo Analyzer ‚Ä¢ –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã!"
        footer_bbox = draw.textbbox((0, 0), footer_text, font=footer_font)
        footer_width = footer_bbox[2] - footer_bbox[0]
        footer_x = (self.card_width - footer_width) // 2
        footer_y = self.card_height - 30
        
        draw.text((footer_x, footer_y), footer_text, font=footer_font, fill=self.colors['text_secondary'])
    
    def _create_simple_card(self, analysis_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        try:
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            draw = ImageDraw.Draw(img)
            
            text = "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã\n\n"
            text += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in analysis_data.get('recommendations', [])[:3]:
                text += f"‚Ä¢ {rec}\n"
            
            draw.text((50, 50), text, fill=self.colors['text_primary'])
            
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            
            return img_byte_arr.getvalue()
        except:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            return img_byte_arr.getvalue()
