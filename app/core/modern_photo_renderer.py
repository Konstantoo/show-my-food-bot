from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from typing import Dict, List


class ModernPhotoRenderer:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Å—Ö–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self):
        self.card_width = 1280
        self.card_height = 720
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'background': '#FFFFFF',
            'primary': '#1a1a1a',      # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            'secondary': '#6366f1',     # –ò–Ω–¥–∏–≥–æ
            'accent': '#f59e0b',        # –Ø–Ω—Ç–∞—Ä–Ω—ã–π
            'success': '#10b981',       # –ò–∑—É–º—Ä—É–¥–Ω—ã–π
            'warning': '#f97316',       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'error': '#ef4444',         # –ö—Ä–∞—Å–Ω—ã–π
            'text_primary': '#1f2937',  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            'text_secondary': '#6b7280', # –°—Ä–µ–¥–Ω–µ-—Å–µ—Ä—ã–π
            'text_light': '#9ca3af',    # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            'border': '#e5e7eb',        # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            'gradient_start': '#667eea', # –°–∏–Ω–∏–π
            'gradient_end': '#764ba2',   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'card_bg': '#f8fafc',       # –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            'highlight': '#fef3c7'      # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
        }
    
    def render_photo_analysis_card(self, analysis_data: Dict) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            draw = ImageDraw.Draw(img)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            self._draw_modern_gradient(draw)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            self._draw_modern_header(draw)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            self._draw_main_analysis(draw, analysis_data)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self._draw_recommendations_section(draw, analysis_data.get('recommendations', []))
            
            # –¢–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            self._draw_photo_type_section(draw, analysis_data.get('photo_type', {}))
            
            # –ü–æ–¥–≤–∞–ª
            self._draw_modern_footer(draw)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG', quality=95)
            img_byte_arr.seek(0)
            
            return img_byte_arr.getvalue()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return self._create_fallback_card(analysis_data)
    
    def _draw_modern_gradient(self, draw):
        """–†–∏—Å—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
        for y in range(self.card_height):
            ratio = y / self.card_height
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            r = int(102 + (118 - 102) * ratio)
            g = int(126 + (75 - 126) * ratio)
            b = int(234 + (162 - 234) * ratio)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            alpha = int(0.1 * 255)
            color = (r, g, b, alpha)
            draw.line([(0, y), (self.card_width, y)], fill=(r, g, b))
    
    def _draw_modern_header(self, draw):
        """–†–∏—Å—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        try:
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 52)
            subtitle_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            title_font = ImageFont.load_default()
            subtitle_font = ImageFont.load_default()
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = "üì∏ Photo Analyzer"
        title_bbox = draw.textbbox((0, 0), title, font=title_font)
        title_width = title_bbox[2] - title_bbox[0]
        title_x = (self.card_width - title_width) // 2
        title_y = 40
        
        # –¢–µ–Ω—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        draw.text((title_x + 3, title_y + 3), title, font=title_font, fill=(0, 0, 0, 50))
        draw.text((title_x, title_y), title, font=title_font, fill=self.colors['primary'])
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = "‚ú® –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"
        subtitle_bbox = draw.textbbox((0, 0), subtitle, font=subtitle_font)
        subtitle_width = subtitle_bbox[2] - subtitle_bbox[0]
        subtitle_x = (self.card_width - subtitle_width) // 2
        subtitle_y = title_y + 70
        
        draw.text((subtitle_x, subtitle_y), subtitle, font=subtitle_font, fill=self.colors['text_secondary'])
    
    def _draw_main_analysis(self, draw, analysis_data):
        """–†–∏—Å—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        try:
            info_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
            value_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 22)
            small_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        except:
            info_font = ImageFont.load_default()
            value_font = ImageFont.load_default()
            small_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        start_y = 150
        left_margin = 60
        right_margin = self.card_width - 60
        
        # –§–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_bg_height = 140
        draw.rounded_rectangle(
            [left_margin - 20, start_y - 20, right_margin + 20, start_y + analysis_bg_height],
            radius=16,
            fill=self.colors['card_bg']
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        draw.text((left_margin, start_y), "üîç –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", font=value_font, fill=self.colors['primary'])
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis = analysis_data.get('analysis', {})
        technical = analysis_data.get('technical', {})
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        elements_row1 = [
            ("üé® –¶–≤–µ—Ç–∞:", analysis.get('colors', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')[:25] + "..." if len(analysis.get('colors', '')) > 25 else analysis.get('colors', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')),
            ("üí° –û—Å–≤–µ—â–µ–Ω–∏–µ:", analysis.get('lighting', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')[:25] + "..." if len(analysis.get('lighting', '')) > 25 else analysis.get('lighting', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'))
        ]
        
        for i, (label, value) in enumerate(elements_row1):
            x = left_margin + i * (right_margin - left_margin) // 2
            y = start_y + 35
            draw.text((x, y), label, font=info_font, fill=self.colors['text_primary'])
            draw.text((x, y + 25), value, font=small_font, fill=self.colors['text_secondary'])
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        elements_row2 = [
            ("üìê –ö–æ–º–ø–æ–∑–∏—Ü–∏—è:", analysis.get('composition', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')[:25] + "..." if len(analysis.get('composition', '')) > 25 else analysis.get('composition', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')),
            ("üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", technical.get('resolution', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'))
        ]
        
        for i, (label, value) in enumerate(elements_row2):
            x = left_margin + i * (right_margin - left_margin) // 2
            y = start_y + 85
            draw.text((x, y), label, font=info_font, fill=self.colors['text_primary'])
            draw.text((x, y + 25), value, font=small_font, fill=self.colors['text_secondary'])
    
    def _draw_recommendations_section(self, draw, recommendations):
        """–†–∏—Å—É–µ—Ç —Å–µ–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        try:
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 24)
            rec_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 18)
        except:
            title_font = ImageFont.load_default()
            rec_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        start_y = 320
        left_margin = 60
        right_margin = self.card_width - 60
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        draw.text((left_margin, start_y), "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", font=title_font, fill=self.colors['primary'])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        for i, rec in enumerate(recommendations[:4]):  # –ú–∞–∫—Å–∏–º—É–º 4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            col = i % 2
            row = i // 2
            
            x = left_margin + col * (right_margin - left_margin) // 2
            y = start_y + 40 + row * 35
            
            # –§–æ–Ω –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            draw.rounded_rectangle(
                [x - 10, y - 8, x + (right_margin - left_margin) // 2 - 20, y + 25],
                radius=8,
                fill=self.colors['highlight']
            )
            
            # –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if len(rec) > 35:
                rec = rec[:32] + "..."
            draw.text((x, y), rec, font=rec_font, fill=self.colors['text_primary'])
    
    def _draw_photo_type_section(self, draw, photo_type_data):
        """–†–∏—Å—É–µ—Ç —Å–µ–∫—Ü–∏—é —Ç–∏–ø–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            title_font = ImageFont.truetype("/System/Library/Fonts/Arial Bold.ttf", 20)
            info_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        except:
            title_font = ImageFont.load_default()
            info_font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è
        start_y = 500
        left_margin = 60
        right_margin = self.card_width - 60
        
        if photo_type_data.get('detected_type') != 'unknown':
            type_info = photo_type_data.get('type_info', {})
            type_name = type_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
            type_desc = type_info.get('description', '')
            confidence = photo_type_data.get('confidence', 0)
            
            # –§–æ–Ω –¥–ª—è —Ç–∏–ø–∞
            draw.rounded_rectangle(
                [left_margin - 15, start_y - 15, right_margin + 15, start_y + 100],
                radius=12,
                fill=self.colors['card_bg']
            )
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
            draw.text((left_margin, start_y), f"üé≠ –¢–∏–ø: {type_name}", font=title_font, fill=self.colors['secondary'])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞
            if len(type_desc) > 60:
                type_desc = type_desc[:57] + "..."
            draw.text((left_margin, start_y + 30), type_desc, font=info_font, fill=self.colors['text_secondary'])
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            conf_text = f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {int(confidence * 100)}%"
            draw.text((left_margin, start_y + 55), conf_text, font=info_font, fill=self.colors['success'])
    
    def _draw_modern_footer(self, draw):
        """–†–∏—Å—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥–≤–∞–ª"""
        try:
            footer_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 18)
        except:
            footer_font = ImageFont.load_default()
        
        footer_text = "üì∏ Photo Analyzer ‚Ä¢ –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò"
        footer_bbox = draw.textbbox((0, 0), footer_text, font=footer_font)
        footer_width = footer_bbox[2] - footer_bbox[0]
        footer_x = (self.card_width - footer_width) // 2
        footer_y = self.card_height - 40
        
        draw.text((footer_x, footer_y), footer_text, font=footer_font, fill=self.colors['text_light'])
    
    def _create_fallback_card(self, analysis_data):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        try:
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            draw = ImageDraw.Draw(img)
            
            text = "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
            text += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for rec in analysis_data.get('recommendations', [])[:3]:
                text += f"‚Ä¢ {rec}\n"
            
            draw.text((50, 50), text, fill=self.colors['text_primary'])
            
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            
            return img_byte_arr.getvalue()
        except:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (self.card_width, self.card_height), self.colors['background'])
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            return img_byte_arr.getvalue()
