import re
import validators
from typing import List, Optional, Tuple


class TextParser:
    """–ü–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–∞—Ö"""
    
    @staticmethod
    def parse_dish_description(text: str) -> Tuple[str, Optional[int], str]:
        """
        –ü–∞—Ä—Å–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–µ—Å –∏ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        
        –ü—Ä–∏–º–µ—Ä—ã:
        - "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ 250–≥ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è" -> ("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", 250, "–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è")
        - "–±–æ—Ä—â 300" -> ("–±–æ—Ä—â", 300, "–≤–∞—Ä–∫–∞")
        - "–ø–ª–æ–≤" -> ("–ø–ª–æ–≤", 100, "–≤–∞—Ä–∫–∞")
        """
        text = text.lower().strip()
        
        # –ò—â–µ–º –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
        weight_match = re.search(r'(\d+)\s*–≥', text)
        weight = int(weight_match.group(1)) if weight_match else None
        
        # –£–¥–∞–ª—è–µ–º –≤–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if weight_match:
            text = text.replace(weight_match.group(0), '').strip()
        
        # –°–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        cooking_methods = [
            '–≤–∞—Ä–∫–∞', '–∂–∞—Ä–∫–∞', '–∑–∞–ø–µ–∫–∞–Ω–∏–µ', '—Ç—É—à–µ–Ω–∏–µ', '–≥—Ä–∏–ª—å', 
            '–∂–∞—Ä–∫–∞ –Ω–∞ —É–≥–ª—è—Ö', '—Å—ã—Ä–æ–π', '–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–∂–∞—Ä–µ–Ω–∞—è',
            '—Ç—É—à–µ–Ω–∞—è', '–≤–∞—Ä–µ–Ω—ã–π', '–≤–∞—Ä–µ–Ω–Ω–∞—è'
        ]
        
        # –ò—â–µ–º —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        cooking_method = "–≤–∞—Ä–∫–∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for method in cooking_methods:
            if method in text:
                cooking_method = method
                text = text.replace(method, '').strip()
                break
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
        dish_name = re.sub(r'\s+', ' ', text).strip()
        
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if not dish_name:
            return ("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ", weight or 100, cooking_method)
        
        return (dish_name, weight or 100, cooking_method)
    
    @staticmethod
    def extract_weight(text: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        weight_match = re.search(r'(\d+)\s*–≥', text.lower())
        return int(weight_match.group(1)) if weight_match else None
    
    @staticmethod
    def extract_cooking_method(text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        cooking_methods = [
            '–≤–∞—Ä–∫–∞', '–∂–∞—Ä–∫–∞', '–∑–∞–ø–µ–∫–∞–Ω–∏–µ', '—Ç—É—à–µ–Ω–∏–µ', '–≥—Ä–∏–ª—å', 
            '–∂–∞—Ä–∫–∞ –Ω–∞ —É–≥–ª—è—Ö', '—Å—ã—Ä–æ–π', '–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–∂–∞—Ä–µ–Ω–∞—è',
            '—Ç—É—à–µ–Ω–∞—è', '–≤–∞—Ä–µ–Ω—ã–π', '–≤–∞—Ä–µ–Ω–Ω–∞—è'
        ]
        
        text_lower = text.lower()
        for method in cooking_methods:
            if method in text_lower:
                return method
        
        return "–≤–∞—Ä–∫–∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    @staticmethod
    def clean_dish_name(text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –≤–µ—Å –∏ —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        text = re.sub(r'\d+\s*–≥', '', text.lower())
        
        cooking_methods = [
            '–≤–∞—Ä–∫–∞', '–∂–∞—Ä–∫–∞', '–∑–∞–ø–µ–∫–∞–Ω–∏–µ', '—Ç—É—à–µ–Ω–∏–µ', '–≥—Ä–∏–ª—å', 
            '–∂–∞—Ä–∫–∞ –Ω–∞ —É–≥–ª—è—Ö', '—Å—ã—Ä–æ–π', '–∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–∂–∞—Ä–µ–Ω–∞—è',
            '—Ç—É—à–µ–Ω–∞—è', '–≤–∞—Ä–µ–Ω—ã–π', '–≤–∞—Ä–µ–Ω–Ω–∞—è'
        ]
        
        for method in cooking_methods:
            text = text.replace(method, '')
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'[^\w\s]', '', text)
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    @staticmethod
    def validate_url(url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL"""
        return validators.url(url) is True
    
    @staticmethod
    def extract_domain(url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL"""
        try:
            from urllib.parse import urlparse
            parsed = urlparse(url)
            return parsed.netloc
        except:
            return None
    
    @staticmethod
    def format_sources(sources: List[str], max_domains: int = 2) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not sources:
            return ""
        
        domains = []
        for source in sources:
            domain = TextParser.extract_domain(source)
            if domain and domain not in domains:
                domains.append(domain)
                if len(domains) >= max_domains:
                    break
        
        return ", ".join(domains)
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 100) -> str:
        """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(text) <= max_length:
            return text
        
        return text[:max_length-3] + "..."
    
    @staticmethod
    def format_nutrition_text(nutrition_result) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not nutrition_result:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        text = f"üçΩÔ∏è {nutrition_result.dish_name.title()}\n\n"
        text += f"üìä –ö–∞–ª–æ—Ä–∏–∏: ~{nutrition_result.total_kcal:.0f} –∫–∫–∞–ª ({nutrition_result.weight_g}–≥)\n"
        text += f"ü•© –ë–µ–ª–∫–∏: {nutrition_result.total_protein:.1f}–≥\n"
        text += f"ü•ì –ñ–∏—Ä—ã: {nutrition_result.total_fat:.1f}–≥\n"
        text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {nutrition_result.total_carbs:.1f}–≥\n"
        text += f"üë®‚Äçüç≥ –°–ø–æ—Å–æ–±: {nutrition_result.cooking_method.title()}\n"
        
        if nutrition_result.assumptions:
            text += f"\n‚ö†Ô∏è –î–æ–ø—É—â–µ–Ω–∏—è: {' ‚Ä¢ '.join(nutrition_result.assumptions)}"
        
        return text


