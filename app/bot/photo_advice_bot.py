import asyncio
import logging
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import Config
from app.core.photo_analyzer import PhotoAnalyzer
from app.core.advice_renderer import AdviceRenderer
from app.core.session import SessionStore
from app.utils.file_utils import FileUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = getattr(logging, Config.LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(level=log_level)
logger = logging.getLogger(__name__)


class PhotoAdviceBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.session_store = SessionStore()
        self.analyzer = PhotoAnalyzer()
        self.renderer = AdviceRenderer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_reset, Command("reset"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        self.dp.message.register(self.handle_photo, F.photo)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        self.dp.message.register(self.handle_text, F.text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handle_callback)
    
    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üì∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Photo Advice Bot!**

–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –¥–∞—é —Å–æ–≤–µ—Ç—ã –≤–º–µ—Å—Ç–µ —Å **–º—É–¥—Ä–æ—Å—Ç—å—é –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å—Ç–µ—Ä–æ–≤** ‚Äî —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤, —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤, —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!

**üì∑ –ß—Ç–æ —è –¥–µ–ª–∞—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–∏–∫—É
‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é **—Ü–∏—Ç–∞—Ç—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤**, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫ –≤–∞—à–µ–º—É —Ñ–æ—Ç–æ
‚Ä¢ –î–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

**üé≠ –ú–∞—Å—Ç–µ—Ä–∞, —á—å–∏ —Å–ª–æ–≤–∞ –≤—ã —É—Å–ª—ã—à–∏—Ç–µ:**
‚Ä¢ –ê–Ω—Ä–∏ –ö–∞—Ä—Ç—å–µ-–ë—Ä–µ—Å—Å–æ–Ω, –ê–Ω—Å–µ–ª—å –ê–¥–∞–º—Å
‚Ä¢ –°—Ç—ç–Ω–ª–∏ –ö—É–±—Ä–∏–∫, –†–æ–¥–∂–µ—Ä –î–∏–∫–∏–Ω—Å  
‚Ä¢ –õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏, –ü–∏–∫–∞—Å—Å–æ
‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ...

**üîç –ö–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–º–æ—â—å
/reset - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        """
        
        await message.answer(welcome_text)
    
    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–∏–∫—É
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

**üéØ –¢–∏–ø—ã —Å–æ–≤–µ—Ç–æ–≤:**
‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è (–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π, —Å–∏–º–º–µ—Ç—Ä–∏—è, –ª–∏–Ω–∏–∏)
‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ (–∫–æ–Ω—Ç—Ä–∞—Å—Ç, —Ç–µ–Ω–∏, —Ü–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞ (—Ä–µ–∑–∫–æ—Å—Ç—å, –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏, —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è)
‚Ä¢ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å)

**üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ñ–æ—Ç–æ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        """
        
        await message.answer(help_text)
    
    async def cmd_reset(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        session = self.session_store.get_session(message.from_user.id)
        session.reset_photo_state()
        
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    
    async def handle_photo(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = message.photo[-1]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = await self.bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{Config.TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            image_data = await FileUtils.download_image(file_url)
            if not image_data:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if FileUtils.is_image_too_large(image_data):
                await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.")
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image_data = FileUtils.resize_image_if_needed(image_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            status_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
            
            try:
                analysis_result = await self.analyzer.analyze_photo(image_data)
                
                if not analysis_result:
                    await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    return
                    
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
                await status_message.delete()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
                await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É
            quote = await self.analyzer.get_inspirational_quote(analysis_result)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            advice_text = self._format_advice_text(analysis_result, quote)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–≤–µ—Ç–∞–º–∏
            card_data = self.renderer.render_advice_card(analysis_result, quote)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer_photo(
                photo=InputFile(BytesIO(card_data), filename="photo_advice.png"),
                caption=advice_text
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üé≠ –î—Ä—É–≥–∞—è —Ü–∏—Ç–∞—Ç–∞",
                callback_data="more_quotes"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üí° –ï—â–µ —Å–æ–≤–µ—Ç—ã",
                callback_data="more_advice"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üì∑ –¢–µ—Ö–Ω–∏–∫–∞",
                callback_data="technical_advice"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                callback_data="new_analysis"
            ))
            
            keyboard.adjust(2)
            
            await message.answer(
                "üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –µ—â–µ?",
                reply_markup=keyboard.as_markup()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            session = self.session_store.get_session(message.from_user.id)
            session.current_photo_analysis = analysis_result
            session.add_advice_shown(analysis_result.main_advice)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = message.text.strip().lower()
        
        if text in ['—Å–æ–≤–µ—Ç', '—Å–æ–≤–µ—Ç—ã', '–ø–æ–º–æ—â—å', 'help']:
            await self.cmd_help(message)
        elif text in ['—Å–±—Ä–æ—Å', 'reset', '–Ω–æ–≤—ã–π', '–∑–∞–Ω–æ–≤–æ']:
            await self.cmd_reset(message)
        else:
            await message.answer(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ø–æ–º–æ—â—å\n"
                "/reset - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
            )
    
    def _format_advice_text(self, analysis_result, quote=None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Å–æ–≤–µ—Ç–∞–º–∏ –∏ —Ü–∏—Ç–∞—Ç–æ–π –º–∞—Å—Ç–µ—Ä–∞"""
        text = f"üì∏ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ–≤–µ—Ç
        text += f"üí° **–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç:**\n{analysis_result.main_advice}\n\n"
        
        # –û—Ü–µ–Ω–∫–∏
        text += f"üìä **–û—Ü–µ–Ω–∫–∏:**\n"
        text += f"‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {analysis_result.composition_score}/10\n"
        text += f"‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ: {analysis_result.lighting_score}/10\n"
        text += f"‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞: {analysis_result.technical_score}/10\n"
        text += f"‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis_result.overall_score}/10\n\n"
        
        # –¶–∏—Ç–∞—Ç–∞ –º–∞—Å—Ç–µ—Ä–∞
        if quote:
            text += f"üé≠ **–°–ª–æ–≤–∞ –º–∞—Å—Ç–µ—Ä–∞:**\n"
            text += f"*¬´{quote['text']}¬ª*\n\n"
            text += f"‚Äî **{quote['author']}**, {quote['profession']}\n\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã (—Å–æ–∫—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –º–µ—Å—Ç–æ –±—ã–ª–æ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã)
        if analysis_result.additional_advice:
            text += f"üîß **–°–æ–≤–µ—Ç—ã:**\n"
            for advice in analysis_result.additional_advice[:2]:
                text += f"‚Ä¢ {advice}\n"
        
        return text
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await callback.answer()
        
        data = callback.data
        session = self.session_store.get_session(callback.from_user.id)
        
        if data == "more_quotes":
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
            if not session.current_photo_analysis:
                await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–æ—Ç–æ.")
                return
            
            try:
                quotes = await self.analyzer.get_multiple_quotes(session.current_photo_analysis, 2)
                
                if quotes:
                    quotes_text = "üé≠ **–ú—É–¥—Ä–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**\n\n"
                    for i, quote in enumerate(quotes, 1):
                        quotes_text += f"**{i}.** *¬´{quote['text']}¬ª*\n"
                        quotes_text += f"‚Äî **{quote['author']}**, {quote['profession']}\n\n"
                    
                    await callback.message.answer(quotes_text)
                else:
                    await callback.message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        elif data == "more_advice":
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
            if not session.current_photo_analysis:
                await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–æ—Ç–æ.")
                return
            
            try:
                additional_advice = await self.analyzer.get_additional_advice(
                    session.current_photo_analysis
                )
                
                if additional_advice:
                    advice_text = "üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:**\n\n"
                    for advice in additional_advice:
                        advice_text += f"‚Ä¢ {advice}\n"
                    
                    await callback.message.answer(advice_text)
                else:
                    await callback.message.answer("üòî –ë–æ–ª—å—à–µ —Å–æ–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        elif data == "style_advice":
            # –°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é
            await callback.message.answer(
                "üé® **–°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**\n\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —É–≥–ª–∞–º–∏ —Å—ä–µ–º–∫–∏\n"
                "‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞—Ä–º–æ–Ω–∏—é\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥–ª—É–±–∏–Ω—É —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–º–µ—Ç—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω"
            )
        
        elif data == "technical_advice":
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
            await callback.message.answer(
                "üì∑ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:**\n\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑–∫–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —Å—ä–µ–º–∫–æ–π\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à—Ç–∞—Ç–∏–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–ª–∞–Ω—Å –±–µ–ª–æ–≥–æ\n"
                "‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –≤—ã–¥–µ—Ä–∂–∫–æ–π –∏ –¥–∏–∞—Ñ—Ä–∞–≥–º–æ–π\n"
                "‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ –≤ RAW –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"
            )
        
        elif data == "new_analysis":
            # –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            session.reset_photo_state()
            await callback.message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            asyncio.create_task(self._cleanup_sessions_periodically())
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def _cleanup_sessions_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            self.session_store.cleanup_expired_sessions()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = PhotoAdviceBot()
        await bot.start_polling()
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
