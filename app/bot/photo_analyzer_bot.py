import asyncio
import logging
from io import BytesIO
from typing import Dict
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import Config
from app.core.universal_photo_analyzer import UniversalPhotoAnalyzer
from app.core.modern_photo_renderer import ModernPhotoRenderer
from app.core.session import SessionStore
from app.utils.file_utils import FileUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = getattr(logging, Config.LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(level=log_level)
logger = logging.getLogger(__name__)


class PhotoAnalyzerBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.session_store = SessionStore()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        if Config.OPENAI_API_KEY and Config.OPENAI_API_KEY != "your_openai_api_key_here":
            self.analyzer = UniversalPhotoAnalyzer(Config.OPENAI_API_KEY)
        else:
            self.analyzer = None
        
        self.renderer = ModernPhotoRenderer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_analyze, Command("analyze"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        self.dp.message.register(self.handle_photo, F.photo)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        self.dp.message.register(self.handle_text, F.text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handle_callback)
    
    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üì∏ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Photo Analyzer!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ª—É—á—à–∏—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∞–Ω–∞–ª–∏–∑–∞.

**üéØ –ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–ø–æ—Ä—Ç—Ä–µ—Ç, –ø–µ–π–∑–∞–∂, –º–æ–¥–∞)
‚Ä¢ –î–∞–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã —É–ª—É—á—à–µ–Ω–∏—è

**üì± –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤

**üîç –ö–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/analyze - –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑

**üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:**
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç—ã –∏ —Å–µ–ª—Ñ–∏
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç
‚Ä¢ –ú–æ–¥–Ω—ã–µ —Å–Ω–∏–º–∫–∏
‚Ä¢ –ü–µ–π–∑–∞–∂–∏ –∏ –ø—Ä–∏—Ä–æ–¥–∞
‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚Ä¢ Lifestyle —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

**–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞—á–Ω–∏—Ç–µ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ —Å–Ω–∏–º–∫–∏! ‚ú®**
        """
        
        await message.answer(welcome_text)
    
    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Photo Analyzer**

**üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –æ—Å–≤–µ—â–µ–Ω–∏—è, —Ü–≤–µ—Ç–æ–≤
‚Ä¢ –£–∑–Ω–∞–π—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

**üéØ –ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:**
‚Ä¢ **–ö–æ–º–ø–æ–∑–∏—Ü–∏—è** - —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤, –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π
‚Ä¢ **–û—Å–≤–µ—â–µ–Ω–∏–µ** - —è—Ä–∫–æ—Å—Ç—å, —Ç–µ–Ω–∏, –∫–æ–Ω—Ç—Ä–∞—Å—Ç
‚Ä¢ **–¶–≤–µ—Ç–∞** - –ø–∞–ª–∏—Ç—Ä–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –≥–∞—Ä–º–æ–Ω–∏—è
‚Ä¢ **–§–æ–∫—É—Å** - —Ä–µ–∑–∫–æ—Å—Ç—å, –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏
‚Ä¢ **–£–≥–æ–ª —Å—ä–µ–º–∫–∏** - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞, —Ä–∞–∫—É—Ä—Å
‚Ä¢ **–§–æ–Ω** - –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–æ—Å—Ç–æ—Ç–∞

**üí° –¢–∏–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:**
‚Ä¢ **–ü–æ—Ä—Ç—Ä–µ—Ç** - –ª–∏—Ü–æ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º
‚Ä¢ **–í –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç** - —á–µ–ª–æ–≤–µ–∫ —Ü–µ–ª–∏–∫–æ–º
‚Ä¢ **Lifestyle** - –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ **–ú–æ–¥–∞** - —Å—Ç–∏–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏
‚Ä¢ **–ü—Ä–∏—Ä–æ–¥–∞** - –ø–µ–π–∑–∞–∂–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è
‚Ä¢ **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –∑–¥–∞–Ω–∏—è, —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è

**üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—é—Ç:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –æ—Å–≤–µ—â–µ–Ω–∏—é
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ü–≤–µ—Ç–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º

**üì± –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑!**
        """
        
        await message.answer(help_text)
    
    async def cmd_analyze(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n\n–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —Ü–≤–µ—Ç–∞ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.")
    
    async def handle_photo(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            if not self.analyzer:
                await message.answer("‚ùå OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = message.photo[-1]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = await self.bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{Config.TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            image_data = await FileUtils.download_image(file_url)
            if not image_data:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if FileUtils.is_image_too_large(image_data):
                await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.")
                return
            
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OpenAI (–º–∞–∫—Å–∏–º—É–º 1024x1024 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
            image_data = FileUtils.resize_image_if_needed(image_data, max_width=1024, max_height=1024, quality=80)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
            
            analysis_data = await self.analyzer.analyze_photo(image_data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º
            card_data = self.renderer.render_photo_analysis_card(analysis_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            text_response = self._format_analysis_text(analysis_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            photo_file = InputFile(BytesIO(card_data), filename="photo_analysis.png")
            await message.answer_photo(
                photo=photo_file,
                caption=text_response
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞",
                callback_data="detailed_schema"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                callback_data="new_analysis"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üí° –°–æ–≤–µ—Ç—ã –ø–æ —Ç–∏–ø—É —Ñ–æ—Ç–æ",
                callback_data="photo_tips"
            ))
            
            keyboard.adjust(1)
            
            await message.answer(
                "‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=keyboard.as_markup()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            session = self.session_store.get_session(message.from_user.id)
            session.photo_analysis = analysis_data
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = message.text.strip()
        
        if text.lower() in ['–∞–Ω–∞–ª–∏–∑', 'analyze', '—Ñ–æ—Ç–æ', 'photo']:
            await self.cmd_analyze(message)
        else:
            await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")
    
    def _format_analysis_text(self, analysis_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        analysis = analysis_data.get('analysis', {})
        technical = analysis_data.get('technical', {})
        photo_type = analysis_data.get('photo_type', {})
        
        text = "üì∏ **–ê–ù–ê–õ–ò–ó –§–û–¢–û–ì–†–ê–§–ò–ò**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
        if analysis.get('subject'):
            text += f"üéØ **–û–±—ä–µ–∫—Ç:** {analysis['subject']}\n"
        
        # –¢–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if photo_type.get('detected_type') != 'unknown':
            type_info = photo_type.get('type_info', {})
            text += f"üé≠ **–¢–∏–ø:** {type_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        text += f"üì± **–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:** {technical.get('resolution', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üí° **–Ø—Ä–∫–æ—Å—Ç—å:** {technical.get('brightness', 0)}\n"
        text += f"üîç **–†–µ–∑–∫–æ—Å—Ç—å:** {technical.get('sharpness', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        strengths = analysis.get('strengths', [])
        if strengths:
            text += "‚úÖ **–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**\n"
            for strength in strengths[:3]:
                text += f"‚Ä¢ {strength}\n"
            text += "\n"
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        weaknesses = analysis.get('weaknesses', [])
        if weaknesses:
            text += "‚ö†Ô∏è **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**\n"
            for weakness in weaknesses[:3]:
                text += f"‚Ä¢ {weakness}\n"
        
        return text
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await callback.answer()
        
        data = callback.data
        session = self.session_store.get_session(callback.from_user.id)
        
        if data == "detailed_schema":
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏—è
            if hasattr(session, 'photo_analysis') and session.photo_analysis:
                schema = session.photo_analysis.get('improvement_schema', '–°—Ö–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                await callback.message.answer(f"üìã **–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–•–ï–ú–ê –£–õ–£–ß–®–ï–ù–ò–Ø**\n\n{schema}")
            else:
                await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        
        elif data == "new_analysis":
            # –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        
        elif data == "photo_tips":
            # –°–æ–≤–µ—Ç—ã –ø–æ —Ç–∏–ø—É —Ñ–æ—Ç–æ
            if hasattr(session, 'photo_analysis') and session.photo_analysis:
                photo_type = session.photo_analysis.get('photo_type', {})
                if photo_type.get('detected_type') != 'unknown':
                    type_info = photo_type.get('type_info', {})
                    tips = type_info.get('tips', [])
                    
                    tips_text = f"üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è {type_info.get('name', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')}:**\n\n"
                    for tip in tips:
                        tips_text += f"‚Ä¢ {tip}\n"
                    
                    await callback.message.answer(tips_text)
                else:
                    await callback.message.answer("‚ùå –¢–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–Ω–∏–º–æ–∫.")
            else:
                await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            asyncio.create_task(self._cleanup_sessions_periodically())
            
            logger.info("–ó–∞–ø—É—Å–∫ Photo Analyzer Bot –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def _cleanup_sessions_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            self.session_store.cleanup_expired_sessions()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = PhotoAnalyzerBot()
        await bot.start_polling()
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
