import asyncio
import logging
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import Config
from app.core.analyzer_refactored import DishAnalyzerRefactored
from app.core.renderer_refactored import CardRendererRefactored
from app.core.session import SessionStore
from app.utils.text_parse import TextParser
from app.utils.file_utils import FileUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = getattr(logging, Config.LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(level=log_level)
logger = logging.getLogger(__name__)


class ShowMyFoodBotRefactored:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.session_store = SessionStore()
        self.analyzer = DishAnalyzerRefactored()
        self.renderer = CardRendererRefactored()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_reset, Command("reset"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        self.dp.message.register(self.handle_photo, F.photo)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        self.dp.message.register(self.handle_text, F.text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handle_callback)
    
    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üçΩÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Show My Food Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –≤–∞—à–∏—Ö –±–ª—é–¥–∞—Ö.

**üì∏ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–∞–ª–æ—Ä–∏—è–º–∏!

**üîç –ö–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–º–æ—â—å
/reset - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ –§–æ—Ç–æ –ø–∞—Å—Ç—ã ‚Üí –∞–Ω–∞–ª–∏–∑ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏
‚Ä¢ "–±–æ—Ä—â 300–≥" ‚Üí —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ "–ø–∏—Ü—Ü–∞" ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        
        await message.answer(welcome_text)
    
    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –±–ª—é–¥–æ
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–∞–ª–æ—Ä–∏—è–º–∏

**üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥:**
‚Ä¢ "–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞" - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (200–≥)
‚Ä¢ "–Ω–∞–∑–≤–∞–Ω–∏–µ 300–≥" - —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Å–∞
‚Ä¢ "–Ω–∞–∑–≤–∞–Ω–∏–µ 250–≥ –∂–∞—Ä–∫–∞" - —Å –≤–µ—Å–æ–º –∏ —Å–ø–æ—Å–æ–±–æ–º

**‚öñÔ∏è –í–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 200–≥
‚Ä¢ –§–æ—Ä–º–∞—Ç—ã: "250–≥", "250 –≥", "250g"

**üë®‚Äçüç≥ –°–ø–æ—Å–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –≤–∞—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ –∂–∞—Ä–∫–∞, –∑–∞–ø–µ–∫–∞–Ω–∏–µ, —Ç—É—à–µ–Ω–∏–µ, –≥—Ä–∏–ª—å

**üí° –§–∞–∫—Ç—ã:**
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–ª—é–¥–∞
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        """
        
        await message.answer(help_text)
    
    async def cmd_reset(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        session = self.session_store.get_session(message.from_user.id)
        session.reset_dish_state()
        
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.")
    
    async def handle_photo(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = message.photo[-1]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = await self.bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{Config.TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            image_data = await FileUtils.download_image(file_url)
            if not image_data:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if FileUtils.is_image_too_large(image_data):
                await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.")
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image_data = FileUtils.resize_image_if_needed(image_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
            
            suggestions = await self.analyzer.get_dish_suggestions(image_data)
            
            if not suggestions:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            dish_name = suggestions[0]
            await self._analyze_dish(message, dish_name, 200, "–≤–∞—Ä–∫–∞")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        
        if not dish_name:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        weight = weight or 200
        cooking_method = cooking_method or "–≤–∞—Ä–∫–∞"
        
        await self._analyze_dish(message, dish_name, weight, cooking_method)
    
    async def _analyze_dish(self, message: types.Message, dish_name: str, weight: int, cooking_method: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–ª—é–¥–æ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            ingredients = await self.analyzer.get_ingredients_for_dish(dish_name)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            nutrition_result, facts_result = await self.analyzer.full_analysis(
                dish_name,
                weight,
                cooking_method,
                []
            )
            
            if not nutrition_result:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ '{dish_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            nutrition_text = self._format_nutrition_text(nutrition_result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if facts_result.facts:
                fact = facts_result.facts[0]
                fact_text = f"\n\nüí° **{fact.type.title()}**\n{fact.text}"
                if fact.sources:
                    sources_text = TextParser.format_sources(fact.sources)
                    fact_text += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {sources_text}"
                
                nutrition_text += fact_text
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card_data = self.renderer.render_card(nutrition_result, facts_result.facts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer_photo(
                photo=InputFile(BytesIO(card_data), filename="dish_card.png"),
                caption=nutrition_text
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üí° –ï—â–µ —Ñ–∞–∫—Ç",
                callback_data="more_fact"
            ))
            keyboard.add(InlineKeyboardButton(
                text="‚öñÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å",
                callback_data="change_weight"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                callback_data="new_analysis"
            ))
            
            keyboard.adjust(1)
            
            await message.answer(
                "üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=keyboard.as_markup()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            session = self.session_store.get_session(message.from_user.id)
            session.current_dish = dish_name
            session.current_weight = weight
            session.current_cooking_method = cooking_method
            session.nutrition_result = nutrition_result
            if facts_result.facts:
                session.add_fact_shown(facts_result.facts[0].text)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def _format_nutrition_text(self, nutrition_result) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        text = f"üçΩÔ∏è **{nutrition_result.dish_name.title()}**\n"
        text += f"‚öñÔ∏è –í–µ—Å: {nutrition_result.weight_g}–≥\n"
        text += f"üë®‚Äçüç≥ –°–ø–æ—Å–æ–±: {nutrition_result.cooking_method}\n\n"
        
        text += f"üî• **{nutrition_result.total_kcal} –∫–∫–∞–ª**\n"
        text += f"ü•© –ë–µ–ª–∫–∏: {nutrition_result.total_protein}–≥\n"
        text += f"ü•ì –ñ–∏—Ä—ã: {nutrition_result.total_fat}–≥\n"
        text += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {nutrition_result.total_carbs}–≥\n"
        
        if nutrition_result.assumptions:
            text += f"\nüìù *{', '.join(nutrition_result.assumptions)}*"
        
        return text
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await callback.answer()
        
        data = callback.data
        session = self.session_store.get_session(callback.from_user.id)
        
        if data == "more_fact":
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç
            if not session.current_dish:
                await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–ª—é–¥–æ.")
                return
            
            try:
                facts_result = await self.analyzer.get_facts(
                    session.current_dish,
                    session.current_ingredients,
                    session.get_exclude_facts()
                )
                
                if facts_result.facts:
                    fact = facts_result.facts[0]
                    session.add_fact_shown(fact.text)
                    
                    fact_text = f"üí° **{fact.type.title()}**\n\n{fact.text}"
                    if fact.sources:
                        sources_text = TextParser.format_sources(fact.sources)
                        fact_text += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {sources_text}"
                    
                    await callback.message.answer(fact_text)
                else:
                    await callback.message.answer("üòî –ë–æ–ª—å—à–µ —Ñ–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ!")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        elif data == "change_weight":
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
            await callback.message.answer("‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300–≥):")
            session.waiting_for_weight = True
        
        elif data == "new_analysis":
            # –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            session.reset_dish_state()
            await callback.message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            asyncio.create_task(self._cleanup_sessions_periodically())
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def _cleanup_sessions_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            self.session_store.cleanup_expired_sessions()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = ShowMyFoodBotRefactored()
        await bot.start_polling()
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
