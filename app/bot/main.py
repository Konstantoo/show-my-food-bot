import asyncio
import logging
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import Config
from app.core.analyzer import DishAnalyzer
from app.core.renderer import CardRenderer
from app.core.session import SessionStore
from app.utils.text_parse import TextParser
from app.utils.file_utils import FileUtils
from app.core.rules import ValidationRules, BusinessRules

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, Config.LOG_LEVEL))
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DishAnalysisStates(StatesGroup):
    waiting_for_confirmation = State()
    waiting_for_weight = State()
    waiting_for_cooking_method = State()
    waiting_for_correction = State()


class ShowMyFoodBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.bot = Bot(token=Config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.session_store = SessionStore()
        self.analyzer = DishAnalyzer()
        self.renderer = CardRenderer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_privacy, Command("privacy"))
        self.dp.message.register(self.cmd_reset, Command("reset"))
        self.dp.message.register(self.cmd_fact, Command("fact"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        self.dp.message.register(self.handle_photo, F.photo)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        self.dp.message.register(self.handle_text, F.text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.callback_query.register(self.handle_callback)
    
    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üçΩÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Show My Food Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –≤–∞—à–∏—Ö –±–ª—é–¥–∞—Ö.

üì∏ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏!

üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–º–æ—â—å
/privacy - –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
/reset - —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑
/fact - –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç

**–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ:** –ª—é–±–æ–µ –±–ª—é–¥–æ - –ø–∞—Å—Ç–∞, —Å—É–ø, —Å–∞–ª–∞—Ç, –ø–∏—Ü—Ü–∞ –∏ —Ç.–¥.
        """
        
        await message.answer(welcome_text)
    
    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üì∏ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞
‚Ä¢ –ë–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏

‚öñÔ∏è **–£—Ç–æ—á–Ω–µ–Ω–∏–µ –≤–µ—Å–∞:**
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: "250–≥")
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 200–≥

üë®‚Äçüç≥ **–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –≤–∞—Ä–∫–∞, –∂–∞—Ä–∫–∞, –∑–∞–ø–µ–∫–∞–Ω–∏–µ, —Ç—É—à–µ–Ω–∏–µ, –≥—Ä–∏–ª—å
‚Ä¢ –í–ª–∏—è–µ—Ç –Ω–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å

üí° **–§–∞–∫—Ç—ã:**
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–ª—é–¥–∞
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö
‚Ä¢ –°–æ–±—ã—Ç–∏—è –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)

üîß **–ö–æ–º–∞–Ω–¥—ã:**
/reset - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
/fact - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç
/privacy - –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        """
        
        await message.answer(help_text)
    
    async def cmd_privacy(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /privacy"""
        privacy_text = """
üîí **–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**

**–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
‚Ä¢ –°–µ—Å—Å–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è 30 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç—Å—è
‚Ä¢ –ù–∏–∫–∞–∫–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º

**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:**
‚Ä¢ Perplexity AI - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –æ –±–ª—é–¥–∞—Ö
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
‚Ä¢ –§–æ—Ç–æ —É–¥–∞–ª—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è

**–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.
        """
        
        await message.answer(privacy_text)
    
    async def cmd_reset(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset"""
        session = self.session_store.get_session(message.from_user.id)
        session.reset_dish_state()
        
        await message.answer("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ!")
    
    async def cmd_fact(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fact"""
        session = self.session_store.get_session(message.from_user.id)
        
        if not session.current_dish:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±–ª—é–¥–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ñ–æ—Ç–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç
        try:
            facts_result = await self.analyzer.get_facts(
                session.current_dish,
                session.current_ingredients,
                session.get_exclude_facts()
            )
            
            if facts_result.facts:
                fact = facts_result.facts[0]
                session.add_fact_shown(fact.text)
                
                fact_text = f"üí° **{fact.type.title()}**\n\n{fact.text}"
                if fact.sources:
                    sources_text = TextParser.format_sources(fact.sources)
                    fact_text += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {sources_text}"
                
                await message.answer(fact_text)
            else:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–∫—Ç
                fallback_facts = await self.analyzer.get_fallback_facts(session.get_exclude_facts())
                if fallback_facts:
                    fact = fallback_facts[0]
                    session.add_fact_shown(fact.text)
                    
                    fact_text = f"üí° **{fact.type.title()}**\n\n{fact.text}"
                    if fact.sources:
                        sources_text = TextParser.format_sources(fact.sources)
                        fact_text += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {sources_text}"
                    
                    await message.answer(fact_text)
                else:
                    await message.answer("üòî –ë–æ–ª—å—à–µ —Ñ–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ!")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_photo(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo = message.photo[-1]
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file_info = await self.bot.get_file(photo.file_id)
            file_url = f"https://api.telegram.org/file/bot{Config.TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
            image_data = await FileUtils.download_image(file_url)
            if not image_data:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            if FileUtils.is_image_too_large(image_data):
                await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.")
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image_data = FileUtils.resize_image_if_needed(image_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
            
            suggestions = await self.analyzer.get_dish_suggestions(image_data)
            
            if not suggestions:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            session = self.session_store.get_session(message.from_user.id)
            session.current_dish = suggestions[0]
            session.waiting_for_confirmation = True
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            keyboard = InlineKeyboardBuilder()
            for i, suggestion in enumerate(suggestions[:3]):
                keyboard.add(InlineKeyboardButton(
                    text=f"‚úÖ {suggestion.title()}",
                    callback_data=f"confirm_dish_{i}"
                ))
            
            keyboard.add(InlineKeyboardButton(
                text="‚úèÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
                callback_data="correct_dish"
            ))
            
            keyboard.adjust(1)
            
            suggestions_text = "üçΩÔ∏è **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:**\n\n"
            for i, suggestion in enumerate(suggestions[:3]):
                suggestions_text += f"{i+1}. {suggestion.title()}\n"
            
            suggestions_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            
            await message.answer(
                suggestions_text,
                reply_markup=keyboard.as_markup()
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_text(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        session = self.session_store.get_session(message.from_user.id)
        text = message.text.strip()
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–ª—é–¥–∞
        if session.waiting_for_confirmation:
            await self._handle_dish_confirmation(message, text)
        # –ï—Å–ª–∏ –∂–¥–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–µ—Å–∞
        elif session.waiting_for_weight:
            await self._handle_weight_input(message, text)
        # –ï—Å–ª–∏ –∂–¥–µ–º —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        elif session.waiting_for_cooking_method:
            await self._handle_cooking_method_input(message, text)
        # –ï—Å–ª–∏ –∂–¥–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        elif session.waiting_for_correction:
            await self._handle_dish_correction(message, text)
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞
            await self._handle_dish_description(message, text)
    
    async def _handle_dish_confirmation(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–ª—é–¥–∞"""
        session = self.session_store.get_session(message.from_user.id)
        
        # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        
        if not ValidationRules.validate_dish_name(dish_name):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        session.current_dish = dish_name
        session.current_weight = weight
        session.current_cooking_method = cooking_method
        session.waiting_for_confirmation = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await self._perform_full_analysis(message, session)
    
    async def _handle_weight_input(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
        session = self.session_store.get_session(message.from_user.id)
        
        weight = TextParser.extract_weight(text)
        if not weight or not ValidationRules.validate_weight(weight):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å. –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250–≥)")
            return
        
        session.current_weight = weight
        session.waiting_for_weight = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await self._perform_full_analysis(message, session)
    
    async def _handle_cooking_method_input(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        session = self.session_store.get_session(message.from_user.id)
        
        cooking_method = TextParser.extract_cooking_method(text)
        if not ValidationRules.validate_cooking_method(cooking_method):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: –≤–∞—Ä–∫–∞, –∂–∞—Ä–∫–∞, –∑–∞–ø–µ–∫–∞–Ω–∏–µ, —Ç—É—à–µ–Ω–∏–µ, –≥—Ä–∏–ª—å")
            return
        
        session.current_cooking_method = cooking_method
        session.waiting_for_cooking_method = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await self._perform_full_analysis(message, session)
    
    async def _handle_dish_correction(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
        session = self.session_store.get_session(message.from_user.id)
        
        dish_name = TextParser.clean_dish_name(text)
        if not ValidationRules.validate_dish_name(dish_name):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        session.current_dish = dish_name
        session.waiting_for_correction = False
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å
        session.waiting_for_weight = True
        await message.answer(f"üçΩÔ∏è –ë–ª—é–¥–æ: {dish_name.title()}\n\n‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250–≥):")
    
    async def _handle_dish_description(self, message: types.Message, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞ –±–µ–∑ —Ñ–æ—Ç–æ"""
        # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        
        if not ValidationRules.validate_dish_name(dish_name):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
        session = self.session_store.get_session(message.from_user.id)
        session.current_dish = dish_name
        session.current_weight = weight
        session.current_cooking_method = cooking_method
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await self._perform_full_analysis(message, session)
    
    async def _perform_full_analysis(self, message: types.Message, session):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞"""
        try:
            await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–ª—é–¥–æ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            ingredients = await self.analyzer.get_ingredients_for_dish(session.current_dish)
            session.current_ingredients = ingredients
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            nutrition_result, facts_result = await self.analyzer.full_analysis(
                session.current_dish,
                session.current_weight,
                session.current_cooking_method,
                session.get_exclude_facts()
            )
            
            if not nutrition_result:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            session.nutrition_result = nutrition_result
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            nutrition_text = TextParser.format_nutrition_text(nutrition_result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã
            if facts_result.facts:
                fact = facts_result.facts[0]
                session.add_fact_shown(fact.text)
                
                fact_text = f"\n\nüí° **{fact.type.title()}**\n{fact.text}"
                if fact.sources:
                    sources_text = TextParser.format_sources(fact.sources)
                    fact_text += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {sources_text}"
                
                nutrition_text += fact_text
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            card_data = self.renderer.render_card(nutrition_result, facts_result.facts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await message.answer_photo(
                photo=InputFile(BytesIO(card_data), filename="dish_card.png"),
                caption=nutrition_text
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(
                text="üí° –ï—â–µ —Ñ–∞–∫—Ç",
                callback_data="more_fact"
            ))
            keyboard.add(InlineKeyboardButton(
                text="‚öñÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å",
                callback_data="change_weight"
            ))
            keyboard.add(InlineKeyboardButton(
                text="üë®‚Äçüç≥ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–±",
                callback_data="change_cooking"
            ))
            
            keyboard.adjust(1)
            
            await message.answer(
                "üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=keyboard.as_markup()
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª—é–¥–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await callback.answer()
        
        data = callback.data
        session = self.session_store.get_session(callback.from_user.id)
        
        if data.startswith("confirm_dish_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª—é–¥–∞
            index = int(data.split("_")[-1])
            suggestions = await self.analyzer.get_dish_suggestions(b"")  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏
            
            if index < len(suggestions):
                session.current_dish = suggestions[index]
                session.waiting_for_confirmation = False
                session.waiting_for_weight = True
                
                await callback.message.edit_text(
                    f"üçΩÔ∏è –ë–ª—é–¥–æ: {suggestions[index].title()}\n\n‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250–≥):"
                )
        
        elif data == "correct_dish":
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            session.waiting_for_confirmation = False
            session.waiting_for_correction = True
            
            await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
        
        elif data == "more_fact":
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç
            await self.cmd_fact(callback.message)
        
        elif data == "change_weight":
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
            session.waiting_for_weight = True
            await callback.message.edit_text("‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö:")
        
        elif data == "change_cooking":
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            session.waiting_for_cooking_method = True
            await callback.message.edit_text("üë®‚Äçüç≥ –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–≤–∞—Ä–∫–∞, –∂–∞—Ä–∫–∞, –∑–∞–ø–µ–∫–∞–Ω–∏–µ, —Ç—É—à–µ–Ω–∏–µ, –≥—Ä–∏–ª—å):")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            asyncio.create_task(self._cleanup_sessions_periodically())
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def _cleanup_sessions_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π"""
        while True:
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            self.session_store.cleanup_expired_sessions()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = ShowMyFoodBot()
        await bot.start_polling()
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
