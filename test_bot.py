#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.core.analyzer import DishAnalyzer
from app.core.renderer import CardRenderer
from app.core.providers.nutrition_table import TableNutritionProvider
from app.core.providers.hybrid_fact import HybridFactProvider
from app.utils.text_parse import TextParser


async def test_nutrition_provider():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nutrition Provider...")
    
    provider = TableNutritionProvider()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ
    nutrition_info = await provider.get_nutrition_info("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞")
    if nutrition_info:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Å—Ç–µ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞: {nutrition_info.kcal_per_100g} –∫–∫–∞–ª/100–≥")
    else:
        print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Å—Ç–µ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
    result = await provider.calculate_nutrition("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", 250, "–∑–∞–ø–µ–∫–∞–Ω–∏–µ")
    if result:
        print(f"‚úÖ –†–∞—Å—á–µ—Ç –¥–ª—è 250–≥ –∑–∞–ø–µ—á–µ–Ω–Ω–æ–π –ø–∞—Å—Ç—ã: {result.total_kcal} –∫–∫–∞–ª")
        print(f"   –ë–µ–ª–∫–∏: {result.total_protein}–≥, –ñ–∏—Ä—ã: {result.total_fat}–≥, –£–≥–ª–µ–≤–æ–¥—ã: {result.total_carbs}–≥")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")


async def test_fact_provider():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ñ–∞–∫—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fact Provider...")
    
    provider = HybridFactProvider(use_perplexity=False)  # –¢–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
    result = await provider.get_facts("–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", ["–ø–∞—Å—Ç–∞", "–±–µ–∫–æ–Ω", "—è–π—Ü–æ"])
    if result.facts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.facts)} —Ñ–∞–∫—Ç–æ–≤ –æ –ø–∞—Å—Ç–µ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞")
        for fact in result.facts:
            print(f"   - {fact.type}: {fact.text[:50]}...")
    else:
        print("‚ùå –§–∞–∫—Ç—ã –æ –ø–∞—Å—Ç–µ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
    fallback_facts = await provider.get_fallback_facts()
    if fallback_facts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(fallback_facts)} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤")
    else:
        print("‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def test_text_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä —Ç–µ–∫—Å—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Text Parser...")
    
    test_cases = [
        "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞ 250–≥ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è",
        "–±–æ—Ä—â 300–≥",
        "–ø–ª–æ–≤",
        "—Å–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å 200–≥"
    ]
    
    for text in test_cases:
        dish_name, weight, cooking_method = TextParser.parse_dish_description(text)
        print(f"‚úÖ '{text}' -> '{dish_name}' ({weight}–≥, {cooking_method})")


async def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–ª—é–¥"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dish Analyzer...")
    
    analyzer = DishAnalyzer()
    
    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    nutrition_result, facts_result = await analyzer.full_analysis(
        "–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞", 250, "–∑–∞–ø–µ–∫–∞–Ω–∏–µ"
    )
    
    if nutrition_result:
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Å—Ç—ã –∫–∞—Ä–±–æ–Ω–∞—Ä–∞: {nutrition_result.total_kcal} –∫–∫–∞–ª")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
    
    if facts_result.facts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(facts_result.facts)} —Ñ–∞–∫—Ç–æ–≤")
    else:
        print("‚ùå –§–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def test_renderer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Card Renderer...")
    
    try:
        renderer = CardRenderer()
        print("‚úÖ –†–µ–Ω–¥–µ—Ä–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        from app.core.providers.nutrition_base import NutritionResult, NutritionInfo
        
        nutrition_info = NutritionInfo(
            kcal_per_100g=350,
            protein=12,
            fat=18,
            carbs=35,
            notes="–¢–µ—Å—Ç–æ–≤–æ–µ –±–ª—é–¥–æ"
        )
        
        nutrition_result = NutritionResult(
            dish_name="–ø–∞—Å—Ç–∞ –∫–∞—Ä–±–æ–Ω–∞—Ä–∞",
            weight_g=250,
            cooking_method="–∑–∞–ø–µ–∫–∞–Ω–∏–µ",
            nutrition=nutrition_info,
            total_kcal=437.5,
            total_protein=30.0,
            total_fat=45.0,
            total_carbs=87.5,
            confidence=0.8,
            assumptions=["–£—á—Ç–µ–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø–µ–∫–∞–Ω–∏–∏"]
        )
        
        # –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        card_data = renderer.render_card(nutrition_result)
        print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {len(card_data)} –±–∞–π—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üçΩÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Show My Food Bot\n")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        test_text_parser()
        await test_nutrition_provider()
        await test_fact_provider()
        await test_analyzer()
        test_renderer()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
